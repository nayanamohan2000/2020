package program8a;

public class kruskal {
	void krus(int n,int c[][])
	{
		int p[]=new int[10],mcost=0,ne=0;
		int a=0,b=0,u=0,v=0,i,j,min;
		for(i=1;i<=n;i++)
			p[i]=0;
		while(ne!=n-1)
		{
			min=9999;
			for(i=1;i<=n;i++)
			{
				for(j=1;j<=n;j++)
				{
					if(c[i][j]<min)
					{
						min=c[i][j];
						a=u=i;
						b=v=j;
					}
				}
			}
			while(p[u]!=0)
				u=p[u];
			while(p[v]!=0)
				v=p[v];
			if(u!=v)
			{
				System.out.println(a+"->"+b+"=\t"+min);
				p[v]=u;
				ne=ne+1;
				mcost=mcost+min;
			}
			c[a][b]=c[b][a]=9999;
		}
		System.out.println("minimum cost ="+mcost);
				
				
			}
		}
package program8a;
import java.util.Scanner;
public class kruskalmain {
     public static void main(String[]args)
     {
    	 int c[][]=new int[10][10],n;
    	 int i,j;
    	 kruskal k=new kruskal();
    	 System.out.println("\n enter the number of vertices:\t");
    	 Scanner scannerobj=new Scanner(System.in);
    			 n=scannerobj.nextInt();
    	System.out.println("\n enter the cost adjacency matrix:\n");
    	for(i=1;i<=n;i++)
    		for(j=1;j<=n;j++)
    			c[i][j]=scannerobj.nextInt();
    	System.out.println("\n the minimum spanning tree is :\n");
    	k.krus(n,c);
     }
}



